"
Y ~ intY*1 + b*M
M ~ intM*1 + a*X
#variances and residuals
Y ~~ start(.9)*Y
M ~~ start(1.25)*M
Y ~~ M
#Indirect effect
ab := a*b
"
fit <- sem(ivMod, fixed.x = FALSE, data=ds_L)
summary(fit)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
# TSLS: with lmer (which can accomodate id values)
ols_first_mixed <- lmer(M ~ X + (1|ID), data = ds_L)
M_hat_mixed     <- round(fitted(ols_first   , data = ds_L), 3)
summary(ols_first_mixed)
vec <-c(1:5)
rep(vec, each = 5)
# head(rep(ranef(ols_first_mixed, each = 5)))
as.data.frame(ranef(ols_first_mixed))
ds_L2 <-
ds_L %>%
dplyr::left_join(
ds_ranef,
by = c("ID" = "grouping_var")
) %>%
dplyr::mutate(
M_hat_without_id = M_hat_mixed,
M_hat_mixed_with_random_id = M_hat_without_id + id_effect_var
)
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
# ---- systemfit ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using systemfit package
# In this case: Gets same results
# Recreating in systemfit
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
summary(tsls_test)
# ---- sem ------------------------------------------------------------------------------------------------------------------------
# Using sem() function from lavaan packages
# Instrumental Variables Approach
ivMod <-
"
Y ~ intY*1 + b*M
M ~ intM*1 + a*X
#variances and residuals
Y ~~ start(.9)*Y
M ~~ start(1.25)*M
Y ~~ M
#Indirect effect
ab := a*b
"
fit <- sem(ivMod, fixed.x = FALSE, data=ds_L)
summary(fit)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
# TSLS: with lmer (which can accomodate id values)
ols_first_mixed <- lmer(M ~ X + (1|ID), data = ds_L)
M_hat_mixed     <- round(fitted(ols_first   , data = ds_L), 3)
summary(ols_first_mixed)
vec <-c(1:5)
rep(vec, each = 5)
# head(rep(ranef(ols_first_mixed, each = 5)))
as.data.frame(ranef(ols_first_mixed))
ds_L2 <-
ds_L %>%
dplyr::left_join(
ds_ranef,
by = c("ID" = "grouping_var")
) %>%
dplyr::mutate(
M_hat_mixed_b = M_hat_mixed,
M_hat_mixed_with_random_id = M_hat_mixed_b + id_effect_var
)
# ds_ranef <- as.data.frame(ranef(ols_first_mixed)) %>% tibble::as_tibble()
#
ds_ranef <-
ranef(ols_first_mixed) %>%
tibble::as_tibble() %>%
dplyr::mutate(
grouping_var  = as.integer(as.character(grp)),
id_effect_var = condval,
) %>%
dplyr::select(grouping_var, id_effect_var)
ds_L2 <-
ds_L %>%
dplyr::left_join(
ds_ranef,
by = c("ID" = "grouping_var")
) %>%
dplyr::mutate(
M_hat_mixed_b = M_hat_mixed,
M_hat_mixed_with_random_id = M_hat_mixed_b + id_effect_var
)
View(head(ds_L2, 40))
# Second: regress Y onto Predicted M values
ols_second_mixed <- lmer(Y ~ M_hat_mixed_b + (1|ID), data = ds_L2)
summary(ols_second_mixed)
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
# ---- systemfit ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using systemfit package
# In this case: Gets same results
# Recreating in systemfit
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
summary(tsls_test)
# ---- sem ------------------------------------------------------------------------------------------------------------------------
# Using sem() function from lavaan packages
# Instrumental Variables Approach
ivMod <-
"
Y ~ intY*1 + b*M
M ~ intM*1 + a*X
#variances and residuals
Y ~~ start(.9)*Y
M ~~ start(1.25)*M
Y ~~ M
#Indirect effect
ab := a*b
"
fit <- sem(ivMod, fixed.x = FALSE, data=ds_L)
summary(fit)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
# TSLS: with lmer (which can accomodate id values)
ols_first_mixed <- lmer(M ~ X + (1|ID), data = ds_L)
M_hat_mixed     <- round(fitted(ols_first   , data = ds_L), 3)
summary(ols_first_mixed)
vec <-c(1:5)
rep(vec, each = 5)
ds_ranef <-
ranef(ols_first_mixed) %>%
tibble::as_tibble() %>%
dplyr::mutate(
grouping_var  = as.integer(as.character(grp)),
id_effect_var = condval,
) %>%
dplyr::select(grouping_var, id_effect_var)
ds_L2 <-
ds_L %>%
dplyr::left_join(
ds_ranef,
by = c("ID" = "grouping_var")
) %>%
dplyr::mutate(
M_hat_mixed_b = M_hat_mixed,
M_hat_mixed_with_random_id = M_hat_mixed_b + id_effect_var
)
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
# ---- systemfit ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using systemfit package
# In this case: Gets same results
# Recreating in systemfit
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
summary(tsls_test)
# ---- sem ------------------------------------------------------------------------------------------------------------------------
# Using sem() function from lavaan packages
# Instrumental Variables Approach
ivMod <-
"
Y ~ intY*1 + b*M
M ~ intM*1 + a*X
#variances and residuals
Y ~~ start(.9)*Y
M ~~ start(1.25)*M
Y ~~ M
#Indirect effect
ab := a*b
"
fit <- sem(ivMod, fixed.x = FALSE, data=ds_L)
summary(fit)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
# TSLS: with lmer (which can accomodate id values)
ols_first_mixed <- lmer(M ~ X + (1|ID), data = ds_L)
M_hat_mixed     <- round(fitted(ols_first   , data = ds_L), 3)
summary(ols_first_mixed)
vec <-c(1:5)
rep(vec, each = 5)
ds_ranef <-
ranef(ols_first_mixed) %>%
tibble::as_tibble() %>%
dplyr::mutate(
grouping_var  = as.integer(as.character(grp)),
id_effect_var = condval,
) %>%
dplyr::select(grouping_var, id_effect_var)
ds_L2 <-
ds_L %>%
dplyr::left_join(
ds_ranef,
by = c("ID" = "grouping_var")
) %>%
dplyr::mutate(
M_hat_mixed_without_id = M_hat_mixed,
M_hat_mixed_with_random_id = M_hat_mixed_without_id + id_effect_var
)
View(head(ds_L2, 40))
# Second: regress Y onto Predicted M values
ols_second_mixed <- lmer(Y ~ M_hat_mixed_without_id + (1|ID), data = ds_L2)
summary(ols_second_mixed)
vec <-c(1:5)
rep(vec, each = 5)
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
# ---- systemfit ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using systemfit package
# In this case: Gets same results
# Recreating in systemfit
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
summary(tsls_test)
# ---- sem ------------------------------------------------------------------------------------------------------------------------
# Using sem() function from lavaan packages
# Instrumental Variables Approach
ivMod <-
"
Y ~ intY*1 + b*M
M ~ intM*1 + a*X
#variances and residuals
Y ~~ start(.9)*Y
M ~~ start(1.25)*M
Y ~~ M
#Indirect effect
ab := a*b
"
fit <- sem(ivMod, fixed.x = FALSE, data=ds_L)
summary(fit)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
# TSLS: with lmer (which can accomodate id values)
ols_first_mixed <- lmer(M ~ X + (1|ID), data = ds_L)
M_hat_mixed     <- round(fitted(ols_first   , data = ds_L), 3)
summary(ols_first_mixed)
ds_ranef <-
ranef(ols_first_mixed) %>%
tibble::as_tibble() %>%
dplyr::mutate(
grouping_var  = as.integer(as.character(grp)),
id_effect_var = condval,
) %>%
dplyr::select(grouping_var, id_effect_var)
ds_L2 <-
ds_L %>%
dplyr::left_join(
ds_ranef,
by = c("ID" = "grouping_var")
) %>%
dplyr::mutate(
M_hat_mixed_without_id = M_hat_mixed,
M_hat_mixed_with_random_id = M_hat_mixed_without_id + id_effect_var
)
# Second: regress Y onto Predicted M values
ols_second_mixed <- lmer(Y ~ M_hat_mixed_without_id + (1|ID), data = ds_L2)
summary(ols_second_mixed)
