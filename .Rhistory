# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
# ---- systemfit ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using systemfit package
# In this case: Gets same results
# Recreating in systemfit
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
summary(tsls_test)
# ---- sem ------------------------------------------------------------------------------------------------------------------------
# Using sem() function from lavaan packages
# Instrumental Variables Approach
ivMod <-
"
Y ~ intY*1 + b*M
M ~ intM*1 + a*X
#variances and residuals
Y ~~ start(.9)*Y
M ~~ start(1.25)*M
Y ~~ M
#Indirect effect
ab := a*b
"
fit <- sem(ivMod, fixed.x = FALSE, data=ds_L)
summary(fit)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
# TSLS: with lmer (which can accomodate id values)
ols_first_mixed <- lmer(M ~ X + (1|ID), data = ds_L)
M_hat_mixed     <- round(fitted(ols_first   , data = ds_L), 3)
summary(ols_first_mixed)
ds_ranef <-
ranef(ols_first_mixed) %>%
tibble::as_tibble() %>%
dplyr::mutate(
grouping_var  = as.integer(as.character(grp)),
id_effect_var = condval,
) %>%
dplyr::select(grouping_var, id_effect_var)
ds_L2 <-
ds_L %>%
dplyr::left_join(
ds_ranef,
by = c("ID" = "grouping_var")
) %>%
dplyr::mutate(
M_hat_mixed_without_s1id = M_hat_mixed,
M_hat_mixed_with_s1id = M_hat_mixed_without_s1id + id_effect_var
)
# Second: regress Y onto Predicted M values
ols_second_mixed <- lmer(Y ~ M_hat_mixed_without_s1id + (1|ID), data = ds_L2)
summary(ols_second_mixed)
# ----
test <- plm(formula = Y ~ M + X | +x, data = ds_L, model = "random")
test <- plm(formula = Y ~ M + X | +X, data = ds_L, model = "random")
ds_test <-
ds_L
ds_test <-
ds_L
View(head(ds_test))
# ----
rep(c(1:5), 5)
ds_test <-
ds_L %>%
dplyr::mutate(
time = rep(c(1:5), 1000)
) %>%
dplyr::select(ID, time, dplyr::everything())
View(head(ds_test))
View(head(ds_test, 40))
test <- plm(formula = Y ~ M + X | + X, data = ds_test, model = "random")
test <- plm(formula = Y ~ M + X | X, data = ds_test, model = "random")
test <- plm(formula = Y ~ M + X | X, data = ds_test, model = "within")
test <- plm(formula = Y ~ M + X, data = ds_test, model = "within")
test
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "within")
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "random")
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "random", random.method = "ht")
model.matrix(formula = Y ~ M + X | + X | X, data = ds_test)
formula = Y ~ M + X | + X | X
model.matrix(formula = formula, data = ds_test)
model.matrix(formula = formula, data = ds_test, lhs = 1)
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "within")
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "random")
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test)
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "random")
# ----
data("Kmenta")
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
# ---- systemfit ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using systemfit package
# In this case: Gets same results
# Recreating in systemfit
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
summary(tsls_test)
# ---- sem ------------------------------------------------------------------------------------------------------------------------
# Using sem() function from lavaan packages
# Instrumental Variables Approach
ivMod <-
"
Y ~ intY*1 + b*M
M ~ intM*1 + a*X
#variances and residuals
Y ~~ start(.9)*Y
M ~~ start(1.25)*M
Y ~~ M
#Indirect effect
ab := a*b
"
fit <- sem(ivMod, fixed.x = FALSE, data=ds_L)
summary(fit)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
# TSLS: with lmer (which can accomodate id values)
ols_first_mixed <- lmer(M ~ X + (1|ID), data = ds_L)
M_hat_mixed     <- round(fitted(ols_first   , data = ds_L), 3)
summary(ols_first_mixed)
ds_ranef <-
ranef(ols_first_mixed) %>%
tibble::as_tibble() %>%
dplyr::mutate(
grouping_var  = as.integer(as.character(grp)),
id_effect_var = condval,
) %>%
dplyr::select(grouping_var, id_effect_var)
ds_L2 <-
ds_L %>%
dplyr::left_join(
ds_ranef,
by = c("ID" = "grouping_var")
) %>%
dplyr::mutate(
M_hat_mixed_without_s1id = M_hat_mixed,
M_hat_mixed_with_s1id = M_hat_mixed_without_s1id + id_effect_var
)
# Second: regress Y onto Predicted M values
ols_second_mixed <- lmer(Y ~ M_hat_mixed_without_s1id + (1|ID), data = ds_L2)
summary(ols_second_mixed)
# ----
data("Kmenta")
View(head(Kmenta, 40))
ds_kmenta <- Kmenta
ds_kmenta <- Kmenta
eqDemand <- consump ~ price + income
eqSupply <- consump ~ price + farmPrice + trend
eqSystem <- list( demand = eqDemand, supply = eqSupply, data = ds_kmenta)
fitols <- systemfit( eqSystem )
eqFirst  <- M ~ X
eqSecond <- Y ~ M
system    <- list(First = eqFirst, Second = eqSecond)
inst      <- ~ X
test_2sls <- systemfit(system, "2SLS", inst = inst, data = ds_L)
test_2sls
eqFirst  <- M ~ X
eqSecond <- Y ~ M + (1 | ID)
system    <- list(First = eqFirst, Second = eqSecond)
inst      <- ~ X
test_2sls <- systemfit(system, "2SLS", inst = inst, data = ds_L)
test_2sls
+ [Estimating Program Effects on Program Participans](https://www.hhs.gov/ash/oah/sites/default/files/estimating-program-effects-on-program-participants-brief.pdf)
+ [PLM: A package for linear models for panel data](https://cran.r-project.org/web/packages/plm/plm.pdf)
+ [Relevent Stack Exchange Question](https://stats.stackexchange.com/questions/159997/2sls-for-panel-data-in-r)
+ [Fixed Effects and Differences-in-Differences](https://static1.squarespace.com/static/59371c8ad1758ebe90723e40/t/5b085292758d46948e575dc3/1527272083029/strumpf+2017-DD+and+FE.pdf)
+ [PLM](https://cran.r-project.org/web/packages/plm/plm.pdf)
+ [PLM guide](https://cran.r-project.org/web/packages/plm/vignettes/plmPackage.html)
+ [systemfit guide - is not good enough](https://cran.r-project.org/web/packages/systemfit/vignettes/systemfit.pdf)
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
library(quantreg)
library(zeligverse)
library(Zelig)
library(ZeligMultilevel)
install.packages("quantreg")
library(quantreg)
library(zeligverse)
library(Zelig)
library(ZeligMultilevel)
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
library(quantreg)
library(zeligverse)
library(Zelig)
library(ZeligMultilevel)
ds_test_p <-
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "random")
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
library(quantreg)
library(zeligverse)
library(Zelig)
library(ZeligMultilevel)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
# ---- systemfit ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using systemfit package
# In this case: Gets same results
# Recreating in systemfit
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
summary(tsls_test)
# ---- sem ------------------------------------------------------------------------------------------------------------------------
# Using sem() function from lavaan packages
# Instrumental Variables Approach
ivMod <-
"
Y ~ intY*1 + b*M
M ~ intM*1 + a*X
#variances and residuals
Y ~~ start(.9)*Y
M ~~ start(1.25)*M
Y ~~ M
#Indirect effect
ab := a*b
"
fit <- sem(ivMod, fixed.x = FALSE, data=ds_L)
summary(fit)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
# TSLS: with lmer (which can accomodate id values)
ols_first_mixed <- lmer(M ~ X + (1|ID), data = ds_L)
M_hat_mixed     <- round(fitted(ols_first   , data = ds_L), 3)
summary(ols_first_mixed)
ds_ranef <-
ranef(ols_first_mixed) %>%
tibble::as_tibble() %>%
dplyr::mutate(
grouping_var  = as.integer(as.character(grp)),
id_effect_var = condval,
) %>%
dplyr::select(grouping_var, id_effect_var)
ds_L2 <-
ds_L %>%
dplyr::left_join(
ds_ranef,
by = c("ID" = "grouping_var")
) %>%
dplyr::mutate(
M_hat_mixed_without_s1id = M_hat_mixed,
M_hat_mixed_with_s1id = M_hat_mixed_without_s1id + id_effect_var
)
# Second: regress Y onto Predicted M values
ols_second_mixed <- lmer(Y ~ M_hat_mixed_without_s1id + (1|ID), data = ds_L2)
summary(ols_second_mixed)
# ----
ds_test <-
ds_L %>%
dplyr::mutate(
time = rep(c(1:5), 1000)
) %>%
dplyr::select(ID, time, dplyr::everything())
View(head(ds_test, 40))
ds_test_p <-
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "random")
ds_test_p <-
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "random", effect = "twoways")
ds_test_p <-
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "random", effect = "twoways", random.method = "ht")
ds_test_p <-
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test, model = "random", effect = "twoways", random.method = "amemiya")
ds_test_p <-
test <- plm(formula = Y ~ M + X | + X, data = ds_test, model = "random", effect = "twoways", random.method = "amemiya")
colnames(ds_test)
ds_test_p <-pdata.frame(ds_test, index = c("ID", "time"))
View(head(ds_test_p, 40))
test <- plm(formula = Y ~ M + X | + X, data = ds_test_p, model = "random", effect = "twoways", random.method = "amemiya")
test <- plm(formula = Y ~ M + X | + X | X, data = ds_test_p, model = "random", random.method = "ht")
### NOTE: this example illustrates the use of wfe function with randomly
### generated panel data with arbitrary number of units and time.
## generate panel data with number of units = N, number of time = Time
N <- 10 # number of distinct units
Time <- 15 # number of distinct time
## treatment effect
beta <- 1
## generate treatment variable
treat <- matrix(rbinom(N*Time, size = 1, 0.25), ncol = N)
## make sure at least one observation is treated for each unit
while ((sum(apply(treat, 2, mean) == 0) > 0) | (sum(apply(treat, 2, mean) == 1) > 0) |
(sum(apply(treat, 1, mean) == 0) > 0) | (sum(apply(treat, 1, mean) == 1) > 0)) {
treat <- matrix(rbinom(N*Time, size = 1, 0.25), ncol = N)
}
treat.vec <- c(treat)
## unit fixed effects
alphai <- rnorm(N, mean = apply(treat, 2, mean))
## geneate two random covariates
x1 <- matrix(rnorm(N*Time, 0.5,1), ncol=N)
x2 <- matrix(rbeta(N*Time, 5,1), ncol=N)
x1.vec <- c(x1)
x2.vec <- c(x2)
## generate outcome variable
y <- matrix(NA, ncol = N, nrow = Time)
for (i in 1:N) {
y[, i] <- alphai[i] + treat[, i] + x1[,i] + x2[,i] + rnorm(Time)
}
y.vec <- c(y)
## generate unit and time index
unit.index <- rep(1:N, each = Time)
time.index <- rep(1:Time, N)
Data.str <- as.data.frame(cbind(y.vec, treat.vec, unit.index, x1.vec, x2.vec))
colnames(Data.str) <- c("y", "tr", "strata.id", "x1", "x2")
Data.obs <- as.data.frame(cbind(y.vec, treat.vec, unit.index, time.index, x1.vec, x2.vec))
colnames(Data.obs) <- c("y", "tr", "unit", "time", "x1", "x2")
### Average Treatment Effect for the Treated
mod.att <- wfe(y~ tr+x1+x2, data = Data.str, treat = "tr",
unit.index = "strata.id", method = "unit",
qoi = "att", hetero.se=TRUE, auto.se=TRUE)
## summarize the results
summary(mod.att)
# Trying it with ds_L
mod.att_L <- wfe(Y ~ M + X + Z, data = ds_L, treat = "M", unit.index = "ID", method = "unit", qoi = "att")
summary(mod.att_L)
# Trying it with ds_L
mod.att_L <- wfe(Y ~ M + X, data = ds_L, treat = "M", unit.index = "ID", method = "unit", qoi = "att")
summary(mod.att_L)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
# wfe package
# Trying it with ds_L
mod.att_L <- wfe(Y ~ M + X, data = ds_L, treat = "M", unit.index = "ID", method = "unit", qoi = "att")
summary(mod.att_L)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
mod.att_L <- wfe(Y ~ M + X, data = ds_L, treat = "X", unit.index = "ID", method = "unit", qoi = "att")
summary(mod.att_L)
# ---- lmer-guess ------------------------------------------------------------------------------------------------------------------------
mod.att_L <- wfe(Y ~ M + X, data = ds_L, treat = "X", unit.index = "ID", method = "unit", qoi = "att", estimator = "did")
summary(mod.att_L)
summary(ols_second_mixed)
summary(ols_first_mixed)
lmer(Y~M+X + (1|ID), data = ds_L2)
summary(tsls_test)
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
library(quantreg)
library(zeligverse)
library(Zelig)
# library(ZeligMultilevel)
