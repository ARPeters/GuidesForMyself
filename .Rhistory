# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- round(fitted(ols_first), 4)
table(M_hat)
round(coef(ols_first), 3)
table(X = ds_L$X, M = ds_L$M, useNA = "ifany")
summary(ols_first)
require(plm)
install.packages("plm")
require(plm)
data("Crime", package = "plm")
dsq <- data("Crime", package = "plm")
View(head(dsq))
data("Crime", package = "plm")
dsq <- Crime
View(head(dsq))
tslsfd_reg <- plm(log(crmrte) ~ log(prbarr) + factor(year) | . - log(prbarr)
log(taxpc) + log(mix), data = Crime,
model = "fd")
tslsfd_reg <- plm(log(crmrte) ~ log(prbarr) + factor(year) | . - log(prbarr)
log(taxpc) + log(mix), data = Crime,
model = "fd")
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ---- analyze-data ------------------------------------------------------------------------------------------------------------------------
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
summary(fit.ols)
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- round(fitted(ols_first), 4)
table(M_hat)
round(coef(ols_first), 3)
table(X = ds_L$X, M = ds_L$M, useNA = "ifany")
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# TSLS: Using ivreg() function from AER package
# In this case: Get's same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
data("Crime", package = "plm")
cr <- plm(log(crmrte) ~ log(prbarr) + log(polpc) + log(prbconv) +
+ log(prbpris) + log(avgsen) + log(density) + log(wcon) +
+ log(wtuc) + log(wtrd) + log(wfir) + log(wser) + log(wmfg) +
+ log(wfed) + log(wsta) + log(wloc) + log(pctymle) + log(pctmin) +
+ region + smsa + factor(year) | . - log(prbarr) - log(polpc) +
+ log(taxpc) + log(mix), data = Crime,
+ model = "random")
cr <- plm(log(crmrte) ~ log(prbarr) + log(polpc) + log(prbconv) +
log(prbpris) + log(avgsen) + log(density) + log(wcon) +
log(wtuc) + log(wtrd) + log(wfir) + log(wser) + log(wmfg) +
log(wfed) + log(wsta) + log(wloc) + log(pctymle) + log(pctmin) +
region + smsa + factor(year) | . - log(prbarr) - log(polpc) +
log(taxpc) + log(mix), data = Crime,
model = "random")
summary(cr)
test <- plm(Y ~ M | X, data = ds_L)
test <- plm(Y ~ M | X, data = ds_L, random.method = "ht")
data("Wages")
View(head(Wages))
test <- plm(Y ~ M | X, data = ds_L,
random.method = "ht", model = "random", inst.method = "baltagi")
## replicates Baltagi (2005, 2013), table 7.4
## preferred way with plm()
data("Wages", package = "plm")
ht <- plm(lwage ~ wks + south + smsa + married + exp + I(exp ^ 2) +
bluecol + ind + union + sex + black + ed |
bluecol + south + smsa + ind + sex + black |
wks + married + union + exp + I(exp ^ 2),
data = Wages, index = 595,
random.method = "ht", model = "random", inst.method = "baltagi")
summary(ht)
# deprecated way with pht() for HT
ht <- pht(lwage ~ wks + south + smsa + married + exp + I(exp^2) +
bluecol + ind + union + sex + black + ed |
sex + black + bluecol + south + smsa + ind,
data = Wages, model = "ht", index = 595)
summary(ht)
test <- plm(Y ~ M | X, data = ds_L,
random.method = "ht", model = "random", inst.method = "baltagi")
str(ds_L)
str(Wages)
## replicates Baltagi (2005, 2013), table 7.4
## preferred way with plm()
data("Wages", package = "plm")
ht <- plm(lwage ~ wks + south + smsa + married + exp + I(exp ^ 2) +
bluecol + ind + union + sex + black + ed |
bluecol + south + smsa + ind + sex + black |
wks + married + union + exp + I(exp ^ 2),
data = Wages, index = 595,
random.method = "ht", model = "random", inst.method = "baltagi")
summary(ht)
# systemfit
install.packages("install.packages")
# systemfit
install.packages("system.fit")
# systemfit
install.packages("systemfit")
# systemfit
library(systemfit)
data( "Kmenta" )
View(head(Kmenta, 40))
eqDemand <- consump ~ price + income
eqSupply <- consump ~ price + farmPrice + trend
system <- list( demand = eqDemand, supply = eqSupply )
system
## 2SLS estimation
inst <- ~ income + farmPrice + trend
inst
fit2sls <- systemfit( system, "2SLS", inst = inst, data = Kmenta )
print( fit2sls )
eqFirst   <- M ~ X
eqSecond  <- Y ~ X
system <- list(First = eqFirst, Second = eqSecond)
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
eqFirst   <- M ~ X
eqSecond  <- Y ~ X
system <- list(First = eqFirst, Second = eqSecond)
inst <- X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
print(tsls_test)
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
print(tsls_test)
summary(iv_res)
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
summary(ols_first)
politeness=read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
dsq <-
politeness %>%
dplyr::mutate(
gender = dplyr::if_else(gender == "M", 1L, 0L),
attitude_2 = as.factor(dplyr::if_else(attitude == "pol", 1L, 0L))
)
politeness.model = lmer(frequency ~ attitude_2 + gender + (1|subject) + (1|scenario), data=dsq)
summary(politeness.model)
# politeness.model = lmer(frequency ~ attitude_2 + gender + (1|subject) + (1|scenario), data=dsq)
politeness.model = lmer(frequency ~ attitude_2 + gender + (1|subject), data=dsq)
summary(politeness.model)
head(ds_L)
eqFirst  <- M ~ X
eqSecond <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst   <- systemfit(system, "2SLS", inst = inst, data = ds_L)
eqFirst  <- M ~ X
eqSecond <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst   <- systemfit(system, "2SLS", inst = inst, data = ds_L)
inst   <- ~ X
eqFirst  <- M ~ X
eqSecond <- Y ~ M
system    <- list(First = eqFirst, Second = eqSecond)
inst      <- ~ X
test_2sls <- systemfit(system, "2SLS", inst = inst, data = ds_L)
test_2sls
eqFirst  <- M ~ X + (1|ID)
eqSecond <- Y ~ M + (1|ID)
system    <- list(First = eqFirst, Second = eqSecond)
inst      <- ~ X
test_2sls <- systemfit(system, "2SLS", inst = inst, data = ds_L)
eqFirst  <- M ~ X + (1|ID)
eqSecond <- Y ~ M
system    <- list(First = eqFirst, Second = eqSecond)
inst      <- ~ X
test_2sls <- systemfit(system, "2SLS", inst = inst, data = ds_L)
test_2sls
eqFirst  <- M ~ X
eqSecond <- Y ~ M + (1 | ID)
system    <- list(First = eqFirst, Second = eqSecond)
inst      <- ~ X
test_2sls <- systemfit(system, "2SLS", inst = inst, data = ds_L)
data("KleinI")
view(head(KleinI, 40))
View(head(KleinI, 40))
table(table(KleinI$year))
data( "Kmenta" )
View(head(Kmenta, 40))
## replicates Baltagi (2005, 2013), table 7.4
## preferred way with plm()
data("Wages", package = "plm")
ht <- plm(lwage ~ wks + south + smsa + married + exp + I(exp ^ 2) +
bluecol + ind + union + sex + black + ed |
bluecol + south + smsa + ind + sex + black |
wks + married + union + exp + I(exp ^ 2),
data = Wages, index = 595,
random.method = "ht", model = "random", inst.method = "baltagi")
summary(ht)
View(head(Wages, 40))
str(Wages)
data("Grunfield")
data("Grunfield", package = "plm")
data("Grunfeld", package = "plm")
View(head(Grunfeld, 40))
str(Grunfeld)
eqFirst <- value ~ firm
eqSecond <- inv ~ value
eqFirst  <- value ~ firm
eqSecond <- inv ~ value
inst     <- firm
eqFirst  <- value ~ firm
eqSecond <- inv ~ value
system   <- list(First = eqFirst, Second = eqSecond)
inst     <- ~ firm
fit_test <- systemfit(system)
fit_test <- systemfit(system, "2SLS", inst = inst, data = Grunfeld)
fit_test
iv_res <- ivreg(inv ~ value | firm, data = ds_L)
iv_res <- ivreg(inv ~ value | firm, data = Grunfeld)
summary(iv_res)
fit_test
str(Grunfeld)
eqFirst  <- value ~ firm + (1 | year)
eqSecond <- inv ~ value
system   <- list(First = eqFirst, Second = eqSecond)
inst     <- ~ firm
fit_test <- systemfit(system, "2SLS", inst = inst, data = Grunfeld)
eqSecond <- inv ~ value + (1 | year)
eqFirst  <- value ~ firm
eqSecond <- inv ~ value + (1 | year)
system   <- list(First = eqFirst, Second = eqSecond)
inst     <- ~ firm
fit_test <- systemfit(system, "2SLS", inst = inst, data = Grunfeld)
sum(is.na(Grunfeld$firm))
sum(is.na(Grunfeld$year))
sum(is.na(Grunfeld$inv))
sum(is.na(Grunfeld$value))
sum(is.na(Grunfeld$capital))
install.packages(c("plm", "systemfit"))
# ---- seed-data ------------------------------------------------------------------------------------------------------------------------
print("Look, just get some notes down and start arrangingin what you've got so far")
install.packages("knitr")
#This allows knitr to call chunks tagged in the underlying *.R file.
read_chunk("iv_analysis_first_blush.R")
read_chunk("./IV-and-ATT/iv_analysis_first_blush.R")
library(knitr)
#This allows knitr to call chunks tagged in the underlying *.R file.
read_chunk("./IV-and-ATT/iv_analysis_first_blush.R")
library(knitr)
getwd()
#This allows knitr to call chunks tagged in the underlying *.R file.
# read_chunk("./IV-and-ATT/iv_analysis_first_blush.R")
read_chunk("G:/Users/Andrew/Documents/GitHub/GuidesForMyself/IV-and-ATT/iv_analysis_first_blush.R")
knitr:::knit_code$get()
#This allows knitr to call chunks tagged in the underlying *.R file.
read_chunk("./IV-and-ATT/iv_analysis_first_blush.R")
#This allows knitr to call chunks tagged in the underlying *.R file.
read_chunk(".\IV-and-ATT\iv_analysis_first_blush.R")
#This allows knitr to call chunks tagged in the underlying *.R file.
read_chunk("./IV-and-ATT/iv_analysis_first_blush.R")
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
# ---- systemfit ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
# Recreating in systemfit
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
tsls_test
summary(tsls_test)
iv_res
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
rm(list = ls())
# ---- load-packages ------------------------------------------------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
library(AER)
library(lavaan)
library(lme4)
library(wfe)
library(plm)
library(systemfit)
# ---- declare-globals ------------------------------------------------------------------------------------------------------------------------
mySeed <- 7866
simN   <- 5000
# ---- simulate-data ------------------------------------------------------------------------------------------------------------------------
set.seed(mySeed)
# Creating Sample Data
# X (binary) and Z (continuous), predictors of mediator M
X         <- rbinom(n=simN,size=1,prob=.5)
Z         <- rnorm(n=simN)
linpred_M <- -15 + 15*X + .5*Z*X
M         <- rbinom(n=simN,size=1,plogis(linpred_M))
#M         <- 0 + .5*X + .5*Z + rnorm(n=simN)*sqrt(1)
# Outcome variable Y, regressed onto X, Y, and Z
Y         <- 0 + 0*X + .5*M + .5*Z + rnorm(n=simN)*sqrt(1)
ds        <- data.frame(list(Y=Y,M=M,X=X,Z=Z))
# Creating fake longitudinal variable with id and frailty term
id            <- rep(c(1:1000), 5)
id            <- id[order(id)]
frailzy       <- round(rep(rnorm(n = (simN/5)), 5), 3)
frailzy       <- frailzy[order(frailzy)]
L_X           <- rbinom(n=simN,size=1,prob=.5)
L_linpred_M   <- -15 + 15*L_X + .5*frailzy*L_X
L_M           <- rbinom(n=simN,size=1,plogis(L_linpred_M))
L_Y           <- 0 + 0*L_X + 0.5*L_M + 0.5*frailzy + rnorm(n=simN)*sqrt(1)
ds_L          <- data.frame(list(ID = id, Y = L_Y, M=L_M, X=L_X, Z = frailzy))
# ----
# Fiddling around with simulated data
# Baseline analysese
summary(glm(M~X          , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z      , "binomial" , data = ds_L))  # Modeling M: Almost correctly specified
summary(glm(M~X + Z + X*Z, "binomial" , data = ds_L))  # Modeling M: Correctly specified
summary(lm(Y~M    , data = ds_L)) # Modeling Y: Almost Correctly Specified
summary(lm(Y~X+M+Z, data = ds_L)) # Modeling Y: Correctly Specified
# cor(ds[,c(4:1)])
# ggplot(ds,aes(x=M)) + geom_histogram() + facet_grid(~X)
# Linear Model: Almost correct
fit.ols <- lm(Y~X+M, data = ds_L)
# summary(fit.ols)
# ---- TSLS ------------------------------------------------------------------------------------------------------------------------
# Two-Stage Least-Squares regression: Piecemeal
# First: regress M onto X, get predicted M values
ols_first <- lm(M ~ X, data = ds_L)
M_hat     <- fitted(ols_first)
summary(ols_first)
# Second: regress Y onto Predicted M values
ols_second <- lm(Y ~ M_hat, data = ds_L)
summary(ols_second)
# coef(ols_second)
# ---- ivreg ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using ivreg() function from AER package
# In this case: Gets same results
iv_res <- ivreg(Y ~ M | X, data = ds_L)
summary(iv_res)
# ---- systemfit ------------------------------------------------------------------------------------------------------------------------
# TSLS: Using systemfit package
# In this case: Gets same results
# Recreating in systemfit
eqFirst   <- M ~ X
eqSecond  <- Y ~ M
system <- list(First = eqFirst, Second = eqSecond)
inst <- ~ X
tsls_test <- systemfit(system, "2SLS", inst = inst, data = ds_L)
tsls_test
summary(tsls_test)
